// 
// Molecular graphics export from VMD 1.9.4a43
// http://www.ks.uiuc.edu/Research/vmd/
// Requires POV-Ray 3.5 or later
// 
// POV 3.x input script : test1 
// try povray +W1024 +H1024 -Itest1 -Otest1.tga +P +X +A +FT +C
#if (version < 3.5) 
#error "VMD POV3DisplayDevice has been compiled for POV-Ray 3.5 or above.\nPlease upgrade POV-Ray or recompile VMD."
#end 
#declare VMD_clip_on=array[3] {0, 0, 0};
#declare VMD_clip=array[3];
#declare VMD_scaledclip=array[3];
#declare VMD_line_width=0.0020;
#macro VMDC ( C1 )
  texture { pigment { rgbt C1 }}
#end
#macro VMD_point (P1, R1, C1)
  #local T = texture { finish { ambient 1.0 diffuse 0.0 phong 0.0 specular 0.0 } pigment { C1 } }
  #if(VMD_clip_on[2])
  intersection {
    sphere {P1, R1 texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
    VMD_clip[2]
  }
  #else
  sphere {P1, R1 texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
  #end
#end
#macro VMD_line (P1, P2, C1)
  #local T = texture { finish { ambient 1.0 diffuse 0.0 phong 0.0 specular 0.0 } pigment { C1 } }
  #if(VMD_clip_on[2])
  intersection {
    cylinder {P1, P2, VMD_line_width texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
    VMD_clip[2]
  }
  #else
  cylinder {P1, P2, VMD_line_width texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
  #end
#end
#macro VMD_sphere (P1, R1, C1)
  #local T = texture { pigment { C1 } }
  #if(VMD_clip_on[2])
  intersection {
    sphere {P1, R1 texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
    VMD_clip[2]
  }
  #else
  sphere {P1, R1 texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
  #end
#end
#macro VMD_cylinder (P1, P2, R1, C1, O1)
  #local T = texture { pigment { C1 } }
  #if(VMD_clip_on[2])
  intersection {
    cylinder {P1, P2, R1 #if(O1) open #end texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
    VMD_clip[2]
  }
  #else
  cylinder {P1, P2, R1 #if(O1) open #end texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
  #end
#end
#macro VMD_cone (P1, P2, R1, C1)
  #local T = texture { pigment { C1 } }
  #if(VMD_clip_on[2])
  intersection {
    cone {P1, R1, P2, VMD_line_width texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
    VMD_clip[2]
  }
  #else
  cone {P1, R1, P2, VMD_line_width texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
  #end
#end
#macro VMD_triangle (P1, P2, P3, N1, N2, N3, C1)
  #local T = texture { pigment { C1 } }
  smooth_triangle {P1, N1, P2, N2, P3, N3 texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
#end
#macro VMD_tricolor (P1, P2, P3, N1, N2, N3, C1, C2, C3)
  #local NX = P2-P1;
  #local NY = P3-P1;
  #local NZ = vcross(NX, NY);
  #local T = texture { pigment {
    average pigment_map {
      [1 gradient x color_map {[0 rgb 0] [1 C2*3]}]
      [1 gradient y color_map {[0 rgb 0] [1 C3*3]}]
      [1 gradient z color_map {[0 rgb 0] [1 C1*3]}]
    }
    matrix <1.01,0,1,0,1.01,1,0,0,1,-.002,-.002,-1>
    matrix <NX.x,NX.y,NX.z,NY.x,NY.y,NY.z,NZ.x,NZ.y,NZ.z,P1.x,P1.y,P1.z>
  } }
  smooth_triangle {P1, N1, P2, N2, P3, N3 texture {T} #if(VMD_clip_on[1]) clipped_by {VMD_clip[1]} #end no_shadow}
#end
camera {
  orthographic
  location <0.0000, 0.0000, -2.0000>
  look_at <-0.0000, -0.0000, 2.0000>
  up <0.0000, 3.0000, 0.0000>
  right <3.0000, 0.0000, 0.0000>
}
light_source { 
  <-0.1000, 0.1000, -1.0000> 
  color rgb<1.000, 1.000, 1.000> 
  parallel 
  point_at <0.0, 0.0, 0.0> 
}
light_source { 
  <1.0000, 2.0000, -0.5000> 
  color rgb<1.000, 1.000, 1.000> 
  parallel 
  point_at <0.0, 0.0, 0.0> 
}
background {
  color rgb<0.000, 0.000, 0.000>
}
#default { texture {
 finish { ambient 0.000 diffuse 0.650 phong 0.1 phong_size 40.000 specular 0.500 }
} }
#default { texture {
 finish { ambient 0.220 diffuse 0.760 phong 0.1 phong_size 58.884 specular 0.220 }
} }
#declare VMD_line_width=0.0020;
VMD_triangle(<0.86614299,0.055357456,0.34333003>,<0.34307417,-0.092929602,-0.85516596>,<-0.0026110411,-0.89615464,0.074605227>,<0.74909717,-0.61303407,-0.25108287>,<0.74909717,-0.61303407,-0.25108287>,<0.74909717,-0.61303407,-0.25108287>,rgbt<0.000,0.000,1.000,0.780>)
VMD_triangle(<-0.27629828,0.099247456,0.8796432>,<-0.84017599,-0.055581093,-0.26687491>,<-0.0026110411,-0.89615464,0.074605227>,<0.72114182,0.54460096,-0.42821053>,<0.72114182,0.54460096,-0.42821053>,<0.72114182,0.54460096,-0.42821053>,rgbt<0.000,0.000,1.000,0.780>)
VMD_triangle(<0.86614299,0.055357456,0.34333003>,<-0.27629828,0.099247456,0.8796432>,<0.0057091415,0.93055606,-0.092262983>,<0.33837685,0.66436058,0.66642791>,<0.33837685,0.66436058,0.66642791>,<0.33837685,0.66436058,0.66642791>,rgbt<0.000,0.000,1.000,0.780>)
VMD_triangle(<0.34307417,-0.092929602,-0.85516596>,<-0.84017599,-0.055581093,-0.26687491>,<0.0057091415,0.93055606,-0.092262983>,<0.3814595,-0.46832699,0.79696822>,<0.3814595,-0.46832699,0.79696822>,<0.3814595,-0.46832699,0.79696822>,rgbt<0.000,0.000,1.000,0.780>)
#default { texture {
 finish { ambient 0.000 diffuse 0.650 phong 0.1 phong_size 40.000 specular 0.500 }
} }
#default { texture {
 finish { ambient 0.000 diffuse 0.850 phong 0.1 phong_size 38.905 specular 0.000 }
} }
// MoleculeID: 0 ReprID: 0 Beginning VDW
VMD_sphere(<0.0057,0.9306,-0.0923>,0.1023,rgbt<1.000,0.600,0.600,0.000>)
VMD_sphere(<-0.2763,0.0992,0.8796>,0.1023,rgbt<1.000,0.600,0.600,0.000>)
VMD_sphere(<0.8661,0.0554,0.3433>,0.1023,rgbt<1.000,0.600,0.600,0.000>)
VMD_sphere(<-0.0026,-0.8962,0.0746>,0.1023,rgbt<1.000,0.600,0.600,0.000>)
VMD_sphere(<0.3431,-0.0929,-0.8552>,0.1023,rgbt<1.000,0.600,0.600,0.000>)
VMD_sphere(<-0.8402,-0.0556,-0.2669>,0.1023,rgbt<1.000,0.600,0.600,0.000>)
// MoleculeID: 0 ReprID: 1 Beginning CPK
// MoleculeID: 0 ReprID: 1 Beginning VDW
VMD_sphere(<-0.4289,0.1358,0.1028>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.0476,-0.0207,-0.1852>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.1297,-0.3718,-0.4816>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.1260,-0.1140,0.1152>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.2751,-0.0784,-0.0499>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.2272,-0.1671,-0.1466>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.1180,-0.1316,-0.2203>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.3092,-0.2703,-0.1873>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.0842,-0.2016,-0.3341>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.1636,-0.3017,-0.3729>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.2738,-0.3359,-0.3036>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.2206,-0.0525,0.0733>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.3037,0.0360,0.1514>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.2767,0.0591,0.2830>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.3631,0.1443,0.3470>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.4422,0.1990,0.2589>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<0.0839,0.0012,-0.2271>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_sphere(<-0.1036,-0.3145,-0.6059>,0.0292,rgbt<0.250,0.750,0.750,0.000>)
VMD_cylinder(<-0.428875,0.13581,0.102814>,<-0.435528,0.167422,0.180852>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.428875,0.13581,0.102814>,<-0.366297,0.0859129,0.127087>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.0476017,-0.0206847,-0.185176>,<-0.08281,-0.0761232,-0.202742>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.0476017,-0.0206847,-0.185176>,<0.0181502,-0.00974846,-0.206141>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.129687,-0.37178,-0.481572>,<-0.14662,-0.33672,-0.427212>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.129687,-0.37178,-0.481572>,<-0.116638,-0.343131,-0.543757>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.125974,-0.114018,0.115198>,<-0.173289,-0.0832343,0.094233>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.275131,-0.0784106,-0.0498935>,<-0.247867,-0.0654306,0.0116876>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.275131,-0.0784106,-0.0498935>,<-0.251144,-0.122738,-0.0982302>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.227158,-0.167065,-0.146567>,<-0.172588,-0.149313,-0.183437>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.227158,-0.167065,-0.146567>,<-0.268188,-0.21869,-0.166918>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.227158,-0.167065,-0.146567>,<-0.251144,-0.122738,-0.0982302>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.118018,-0.131562,-0.220307>,<-0.172588,-0.149313,-0.183437>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.118018,-0.131562,-0.220307>,<-0.101098,-0.166561,-0.277197>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.118018,-0.131562,-0.220307>,<-0.08281,-0.0761232,-0.202742>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.309217,-0.270314,-0.18727>,<-0.268188,-0.21869,-0.166918>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.309217,-0.270314,-0.18727>,<-0.291505,-0.303101,-0.245423>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.084177,-0.20156,-0.334087>,<-0.123865,-0.25161,-0.353469>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.084177,-0.20156,-0.334087>,<-0.101098,-0.166561,-0.277197>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.163553,-0.30166,-0.372852>,<-0.123865,-0.25161,-0.353469>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.163553,-0.30166,-0.372852>,<-0.218673,-0.318774,-0.338214>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.163553,-0.30166,-0.372852>,<-0.14662,-0.33672,-0.427212>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.273794,-0.335888,-0.303576>,<-0.218673,-0.318774,-0.338214>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.273794,-0.335888,-0.303576>,<-0.291505,-0.303101,-0.245423>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.220604,-0.0524502,0.0732688>,<-0.247867,-0.0654306,0.0116876>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.220604,-0.0524502,0.0732688>,<-0.173289,-0.0832343,0.094233>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.220604,-0.0524502,0.0732688>,<-0.262162,-0.00821686,0.112315>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.30372,0.0360165,0.151361>,<-0.366297,0.0859129,0.127087>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.30372,0.0360165,0.151361>,<-0.290194,0.0475457,0.217193>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.30372,0.0360165,0.151361>,<-0.262162,-0.00821686,0.112315>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.276668,0.0590751,0.283025>,<-0.319896,0.101696,0.31501>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.276668,0.0590751,0.283025>,<-0.290194,0.0475457,0.217193>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.363124,0.144316,0.346995>,<-0.319896,0.101696,0.31501>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.363124,0.144316,0.346995>,<-0.402652,0.171675,0.302943>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.442181,0.199033,0.25889>,<-0.435528,0.167422,0.180852>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.442181,0.199033,0.25889>,<-0.402652,0.171675,0.302943>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<0.083902,0.00118756,-0.227105>,<0.0181502,-0.00974846,-0.206141>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
VMD_cylinder(<-0.103588,-0.314481,-0.605941>,<-0.116638,-0.343131,-0.543757>0.0292,rgbt<0.250,0.750,0.750,0.000>,1)
// End of POV-Ray 3.x generation 
